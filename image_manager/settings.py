"""
Django settings for image_manager project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from dotenv import load_dotenv
from pathlib import Path
import pymysql
pymysql.install_as_MySQLdb()

from corsheaders.defaults import default_headers, default_methods

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-)-y%l@4sorofp3rm97d7@jxb+jmjs4rvo1dkqw_5&2bs!0&r4)"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1'
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # frontend origin
    "http://127.0.0.1:5173"
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    "Authorization",
]

CORS_ALLOW_METHODS = list(default_methods) + [
    "POST",
]

CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # must have    
    'django.contrib.sites',
    # Thêm các app của allauth
    'rest_framework.authtoken',
    'dj_rest_auth.registration',    # ✅ for social login
    
        
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # Thêm provider của Google
    'allauth.socialaccount.providers.google',
    
    "applications.my_app",  
    'corsheaders',
    'django_celery_beat',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    
    "allauth.account.middleware.AccountMiddleware",
    
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]


ROOT_URLCONF = "image_manager.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [os.path.join(BASE_DIR, "templates"), ],
        # "DIRS":[],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = "image_manager.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv("DB_NAME"),
        'USER': os.getenv("DB_USER"),
        'PASSWORD': os.getenv("DB_PASSWORD"),
        'HOST': '127.0.0.1', 
        'PORT': os.getenv("DB_PORT", "3306"),
    },
    "django_db": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

USE_I18N = True

USE_TZ = True

TIME_ZONE = 'Asia/Ho_Chi_Minh'
CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = 'Asia/Ho_Chi_Minh'


JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / 'media'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = (
    # Thư mục chứa các file tĩnh của ứng dụng
    os.path.join(BASE_DIR, "static"),
)


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]
SITE_ID = 2

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
            'https://www.googleapis.com/auth/drive.readonly', # <-- Bắt buộc để đọc file
            # 'https://www.googleapis.com/auth/drive.file', # <-- Thêm nếu cần tạo/sửa file
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline',
            'prompt': 'consent',    
        }
    }
}

SOCIALACCOUNT_STORE_TOKENS = True # Lưu trữ token để sử dụng sau này

LOGIN_REDIRECT_URL = '/api/' # Chuyển về trang chủ sau khi đăng nhập
LOGOUT_REDIRECT_URL = '/api/login' # Chuyển về trang chủ sau khi đăng xuất
ACCOUNT_EMAIL_VERIFICATION = "none" # Tạm thời không yêu cầu xác thực email
SOCIALACCOUNT_AUTO_SIGNUP = True


# image-manager-web

# http://127.0.0.1:8000/accounts/google/login/callback/


# hash password
# PASSWORD_HASHERS = [
#     "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
# ]

AES_KEY= os.getenv("AES_KEY", "default_aes_key_123456")  # 32 bytes key for AES-256


# AUTH_USER_MODEL = 'my_app.User'


# CELERY
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'


CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'


GOOGLE_CLIENT_ID= os.getenv("GOOGLE_CLIENT_ID", "default_google_client_id")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET", "default_google_client_secret")

# minIO
AWS_ACCESS_KEY_ID= os.getenv("AWS_ACCESS_KEY_ID", "AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY= os.getenv("AWS_SECRET_ACCESS_KEY", "AWS_SECRET_ACCESS_KEY")
AWS_S3_BUCKET= os.getenv("AWS_S3_BUCKET", "AWS_S3_BUCKET")
AWS_REGION= os.getenv("AWS_REGION", "AWS_REGION")  # Default region
AWS_S3_ENDPOINT= os.getenv("AWS_S3_ENDPOINT", "AWS_S3_ENDPOINT")  # MinIO endpoint